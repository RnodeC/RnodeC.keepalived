---
- name: Fail if keepalived_vip is not defined
  ansible.builtin.fail:
    msg: "The variable 'keepalived_vip' is not defined"
  when: keepalived_vip is not defined

- name: Check if /etc/keepalived/keepalived.conf exists
  ansible.builtin.stat:
    path: /etc/keepalived/keepalived.conf
  register: keepalived_conf_stat

- name: Read /etc/keepalived/keepalived.conf
  ansible.builtin.slurp:
    src: /etc/keepalived/keepalived.conf
  register: keepalived_conf_content
  when: keepalived_conf_stat.stat.exists

- name: Extract auth_pass value from keepalived.conf
  ansible.builtin.set_fact:
    keepalived_password_existing: "{{ (keepalived_conf_content['content'] | b64decode | regex_search('auth_pass[ \\t]+([^ \\n]+)', '\\1'))[0] }}"
  when: keepalived_conf_stat.stat.exists

- debug: var=keepalived_password_existing
  when: debug | default(false) | bool

- name: Set keepalived_password to keepalived_password_existing if defined
  ansible.builtin.set_fact:
    keepalived_password: "{{ keepalived_password_existing }}"
  when: keepalived_password_existing is defined

- name: Generate keepalived_password on the first host in play_hosts
  ansible.builtin.set_fact:
    keepalived_password: "{{ lookup('community.general.random_string', length=8, special=false) }}"
  when: keepalived_password is not defined
  delegate_to: "{{ play_hosts[0] }}"
  run_once: true

- name: Set keepalived_password for all nodes in the play
  ansible.builtin.set_fact:
    keepalived_password: "{{ hostvars[play_hosts[0]].keepalived_password }}"
  when: keepalived_password is not defined

- debug: var=keepalived_password
  when: debug | default(false) | bool

- block:
  - name: Display ansible_interfaces for debugging
    debug:
      var: ansible_interfaces
    when: debug | default(false) | bool

  - name: Display non_loopback_interfaces for debugging
    debug:
      var: non_loopback_interfaces
    when: debug | default(false) | bool

  - name: Display extracted interfaces for debugging
    debug:
      var: ansible_interfaces | map('extract', ansible_facts) | list
    when: debug | default(false) | bool

  - name: Find primary network interface
    set_fact:
      primary_interface: "{{ non_loopback_interfaces.0.device }}"
    vars:
      non_loopback_interfaces: "{{ ansible_interfaces | map('extract', ansible_facts) | selectattr('ipv4', 'defined') | selectattr('type', 'ne', 'loopback') | list }}"
  - debug: var=primary_interface

  - name: Default keepalived_iface to primary_interface if not provided
    ansible.builtin.set_fact:
      keepalived_iface: "{{ primary_interface }}"
  when: keepalived_iface is not defined

- block:
  - name: Update apt cache
    apt:
      update_cache: true
      cache_valid_time: 3600
    when: ansible_os_family == 'Debian'

  - name: Install keepalived
    ansible.builtin.package:
      name: keepalived
      state: "{{ 'latest' if keepalived_action == 'upgrade' else 'present' }}"
    notify: restart keepalived

  - debug:
      msg: "keepalived_iface = {{ keepalived_iface }}{{ '\n' }}keepalived_vip = {{ keepalived_vip }}"
    when: debug | default(false) | bool

  - name: Load keepalived.conf
    ansible.builtin.template:
      src: keepalived.conf.j2
      dest: /etc/keepalived/keepalived.conf
      owner: root
      group: root
      mode: 0644
    notify: restart keepalived

  - name: Update /etc/hosts
    ansible.builtin.lineinfile:
      path: /etc/hosts
      regexp: "^{{ keepalived_vip }} {{ keepalived_fqdn }}"
      line: "{{ keepalived_vip }} {{ keepalived_fqdn }}"
      state: present
    when:
    - keepalived_fqdn is defined
  become: true

- name: Include check-rke2.sh script
  ansible.builtin.copy:
    src: check-rke2.sh
    dest: /etc/keepalived/check-rke2.sh
    owner: root
    group: root
    mode: 0700
  become: true
  when: keepalived_rke2_enabled

### selinux ###
- block:
  - name: Copy keepalived SELinux policy file to target host
    ansible.builtin.copy:
      src: keepalived_policy.te
      dest: /etc/keepalived/keepalived_policy.te
      owner: root
      group: root
      mode: '0644'
    register: keepalived_policy

  - block:
    - name: Install required SELinux policy utilities
      ansible.builtin.package:
        name:
          - policycoreutils
          - checkpolicy
          - policycoreutils-python-utils
        state: present

    - name: Install required SELinux policy utilities
      ansible.builtin.package:
        name: container-selinux
        state: latest
      when: keepalived_rke2_enabled

    - name: Compile keepalived SELinux policy module
      ansible.builtin.command: >
        checkmodule -M -m -o /etc/keepalived/keepalived_policy.mod /etc/keepalived/keepalived_policy.te

    - name: Create keepalived SELinux policy package
      ansible.builtin.command: >
        semodule_package -o /etc/keepalived/keepalived_policy.pp -m /etc/keepalived/keepalived_policy.mod

    - name: Install keepalived SELinux policy
      ansible.builtin.command: >
        semodule -i /etc/keepalived/keepalived_policy.pp

    #- name: Apply the new keepalived SELinux file context to ??
    #  command: >
    #    restorecon -Rv

    when: keepalived_policy is changed
  become: true
  when:
  - keepalived_rke2_enabled
  - ansible_os_family == 'RedHat'
  - ansible_selinux.status == 'enabled'

# run restart keepalived now
- meta: flush_handlers